import pandas as pd
import folium
import os
from datetime import datetime, timedelta
import logging
import json
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ —Ñ–∞–π–ª–∞
with open('config.json') as config_file:
    config = json.load(config_file)

last_run_str = datetime.now().strftime("%Y-%m-%d %H:%M")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('../log.txt', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º sys.stdout —Å UTF-8
    ],
    encoding='utf-8'  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
)


def read_excel_data(file_path):
    try:
        df = pd.read_excel(file_path)
        logging.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ %s", file_path)
        return df
    except FileNotFoundError:
        logging.error("–§–∞–π–ª %s –Ω–µ –Ω–∞–π–¥–µ–Ω", file_path)
        exit()
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: %s", e)
        exit()


def validate_columns(df):
    required_columns = {'–®–∏—Ä–æ—Ç–∞', '–î–æ–ª–≥–æ—Ç–∞'}
    if not required_columns.issubset(df.columns):
        logging.error("–í —Ñ–∞–π–ª–µ Excel –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: %s", required_columns)
        exit()
    logging.info("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")


def get_color(status):
    status = str(status).strip().lower()
    if status == "–∑–µ–ª–µ–Ω—ã–π":
        return 'green'
    elif status == "–∫—Ä–∞—Å–Ω—ã–π":
        return 'red'
    elif status == "–∑–æ–ª–æ—Ç–æ–π":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–æ–ª–æ—Ç–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        return 'gold'
    else:
        return 'gray'


def calculate_statistics(df):
    now = datetime.now()
    one_month_ago = now - timedelta(days=30)
    golden_audits = df[df['–°—Ç–∞—Ç—É—Å'].str.strip().str.lower() == "–∑–æ–ª–æ—Ç–æ–π"].shape[0]
    green_audits = df[df['–°—Ç–∞—Ç—É—Å'].str.strip().str.lower() == "–∑–µ–ª–µ–Ω—ã–π"].shape[0]
    red_audits = df[df['–°—Ç–∞—Ç—É—Å'].str.strip().str.lower() == "–∫—Ä–∞—Å–Ω—ã–π"].shape[0]
    old_audits = df[(df['–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞'].isna()) | (df['–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞'] < one_month_ago)].shape[0]
    goal_percentage = round(((green_audits + golden_audits) / (green_audits + golden_audits + red_audits)) * 100, 1) if len(df) > 0 else 0

    current_year = datetime.now().year
    without_audits = 0
    for _, row in df.iterrows():
        has_audit_in_2025 = False
        if pd.notna(row['–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞']) and row['–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞'].year == current_year:
            has_audit_in_2025 = True
        else:
            for i in range(7, len(row), 3):
                if i < len(row) and pd.notna(row.iloc[i]) and row.iloc[i].year == current_year:
                    has_audit_in_2025 = True
                    break
        if not has_audit_in_2025:
            without_audits += 1

    return golden_audits, green_audits, red_audits, old_audits, goal_percentage, without_audits


def save_to_excel(df, output_file_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Excel-—Ñ–∞–π–ª.

    Args:
        df (pandas.DataFrame): DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
        output_file_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel, –∫—É–¥–∞ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.
    """
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel
        df.to_excel(output_file_path, index=False, engine='openpyxl')
        logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {output_file_path}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ Excel: {e}")
        raise

def create_map(df, golden_audits, green_audits, red_audits, goal_percentage, old_audits, without_audits):
    m = folium.Map(location=[59.832213, 30.251091], zoom_start=11)

    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
    golden_group = folium.FeatureGroup(name='–ó–æ–ª–æ—Ç—ã–µ –∞—É–¥–∏—Ç—ã', show=True)
    green_group = folium.FeatureGroup(name='–ó–µ–ª–µ–Ω—ã–µ –∞—É–¥–∏—Ç—ã', show=True)
    red_group = folium.FeatureGroup(name='–ö—Ä–∞—Å–Ω—ã–µ –∞—É–¥–∏—Ç—ã', show=True)
    gray_group = folium.FeatureGroup(name='–°–µ—Ä—ã–µ –∞—É–¥–∏—Ç—ã', show=True)
    for _, row in df.iterrows():
        lat, lon = row['–®–∏—Ä–æ—Ç–∞'], row['–î–æ–ª–≥–æ—Ç–∞']
        name = row['–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞']
        color = get_color(row['–°—Ç–∞—Ç—É—Å'] if pd.notna(row['–°—Ç–∞—Ç—É—Å']) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        popup_text = f"<b>{name}</b>"

        audits = []
        audit_num = 1
        while True:
            if audit_num == 1:
                date_col = '–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞'
                status_col = '–°—Ç–∞—Ç—É—Å'
                auditor_col = '–ê—É–¥–∏—Ç–æ—Ä'
                report_col = '–û—Ç—á–µ—Ç'
            else:
                date_col = f'–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞ {audit_num}'
                status_col = f'–°—Ç–∞—Ç—É—Å {audit_num}'
                auditor_col = f'–ê—É–¥–∏—Ç–æ—Ä {audit_num}'
                report_col = f'–û—Ç—á–µ—Ç {audit_num}'

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤ DataFrame
            if all(col in df.columns for col in [date_col, status_col, auditor_col, report_col]):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Ö–æ—Ç—è –±—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤
                if pd.notna(row[date_col]):
                    audits.append((
                        row[date_col],
                        row[status_col] if pd.notna(row[status_col]) else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                        row[auditor_col] if pd.notna(row[auditor_col]) else None,
                        row[report_col] if pd.notna(row[report_col]) else None
                    ))
                audit_num += 1
            else:
                break




        # –ï—Å–ª–∏ –∞—É–¥–∏—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not audits:
            audits.append((None, "–ï—â—ë –Ω–µ –±—ã–ª–æ –∞—É–¥–∏—Ç–∞ –≤ 2025 –≥–æ–¥—É", None, None))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç popup
        for date, status, auditor, report in audits:
            if pd.notna(date):
                date_str = date.strftime("%d.%m.%Y") if isinstance(date, pd.Timestamp) else str(date)
                popup_text += f"<br><br>–î–∞—Ç–∞ –∞—É–¥–∏—Ç–∞: {date_str}"
            if status and status != "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö":
                popup_text += f"<br>–°—Ç–∞—Ç—É—Å: {status}"
            if auditor:
                popup_text += f"<br>–ê—É–¥–∏—Ç–æ—Ä: {auditor}"
            if report:
                popup_text += f'<br><a href="{report}" target="_blank">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç</a>'

        # –ï—Å–ª–∏ –∞—É–¥–∏—Ç–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if len(audits) > 1:
            popup_text = f"<b>{name} (–ê—É–¥–∏—Ç–æ–≤: {len(audits)})</b>" + popup_text[len(f"<b>{name}</b>"):]

        popup = folium.Popup(popup_text, max_width=300)

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
        if name == "–£–ª—å—è–Ω–∫–∞ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
            marker = folium.Marker(
                location=[lat, lon],
                popup=popup,
                icon=folium.Icon(icon='heart', prefix='fa', icon_color=color, className='gold-star')
            )
        elif color == 'gold':
            marker = folium.Marker(
                location=[lat, lon],
                popup=popup,
                icon=folium.Icon(icon='star', prefix='fa', icon_color='gold', className='gold-star')
            )
        else:
            marker = folium.CircleMarker(
                location=[lat, lon],
                radius=8,
                color=color,
                fill=True,
                fill_color=color,
                fill_opacity=0.7,
                popup=popup
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
        if color == 'green':
            marker.add_to(green_group)
        elif color == 'red':
            marker.add_to(red_group)
        elif color == 'gold':
            marker.add_to(golden_group)
        else:
            marker.add_to(gray_group)


    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –Ω–∞ –∫–∞—Ä—Ç—É
    golden_group.add_to(m)
    green_group.add_to(m)
    red_group.add_to(m)
    gray_group.add_to(m)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–ª–æ–µ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    folium.LayerControl().add_to(m)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    stats_html = f'''
    <div class="stats-box">
        <div class="stats-title" onclick="toggleStats()">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ–≤</div>
        <div class="stats-content">
            <div class="stats-item"><span class="gold">‚≠ê</span> –ó–æ–ª–æ—Ç—ã–µ –∞—É–¥–∏—Ç—ã: <strong>{golden_audits}</strong></div>
            <div class="stats-item"><span class="green">‚úÖ</span> –ó–µ–ª–µ–Ω—ã–µ –∞—É–¥–∏—Ç—ã: <strong>{green_audits}</strong></div>
            <div class="stats-item"><span class="red">‚ùå</span> –ö—Ä–∞—Å–Ω—ã–µ –∞—É–¥–∏—Ç—ã: <strong>{red_audits}</strong></div>
            <div class="stats-item"><span class="goal">üìä</span> % –≤ —Ü–µ–ª–∏: <strong>{goal_percentage}%</strong></div>
            <div class="stats-item"><span class="warning">‚è≥</span> –ë–µ–∑ –∞—É–¥–∏—Ç–∞ > –º–µ—Å—è—Ü–∞: <strong>{old_audits}</strong></div>
            <div class="stats-item"><span class="no-audit">üö´</span> –†–µ—Å—Ç–æ—Ä–∞–Ω—ã –±–µ–∑ –∞—É–¥–∏—Ç–∞ –≤ 2025: <strong>{without_audits}</strong></div>
            <div class="stats-item"><span class="info">üìÖ</span> –û–±–Ω–æ–≤–ª–µ–Ω–æ: <strong style="font-size: 12px;vertical-align: sub">{last_run_str}</strong></div>
        </div>
    </div>
    <script>
    function toggleStats() {{
        var content = document.querySelector(".stats-content");
        content.style.display = content.style.display === "none" ? "block" : "none";
    }}
    </script>
    '''
    styles = '''
    <style>
    .stats-box {
        z-index: 500;
        position: fixed;
        top: 70px;
        right: 10px;
        width: 250px;
        background-color: white;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        font-family: Arial, sans-serif;
    }
    .stats-content {
        display: none;
        margin-top: 10px;
    }
    .stats-title {
        font-size: 16px;
        font-weight: bold;
        cursor: pointer;
        padding-bottom: 10px;
        border-bottom: 1px solid #ddd;
    }
    .stats-item {
        margin-bottom: 10px;
        display: flex;
        align-items: center;
    }
    .stats-item strong {
        font-size: 18px;
        margin-left: 5px;
    }
    .green { color: #2ecc71; }
    .red { color: #e74c3c; }
    .gold { color: #f1c40f; }
    .goal { color: #3498db; }
    .warning { color: #f1c40f; }
    .no-audit { color: #7f8c8d; }
    .info { color: #9b59b6; }
    </style>
    '''
    custom_styles = '''
        <style>
        .gold-star {
            color: #ffd700;
            position: relative;
        }
        .gold-star i{
            font-size: 18px;
            position: absolute;
            left: 50%;
            bottom: 0;
            transform: translate(-50%, 0%);
        }
        </style>
    '''
    m.get_root().html.add_child(folium.Element('''
    <style>
    .leaflet-control {
        z-index: 1000 !important;
    }
    </style>
    '''))
    m.get_root().html.add_child(folium.Element("<style>.leaflet-control-attribution {display:none;}</style>"))
    m.get_root().html.add_child(folium.Element(stats_html))
    m.get_root().html.add_child(folium.Element(styles))
    m.get_root().html.add_child(folium.Element(custom_styles))

    return m


def save_map(m, output_path):
    m.save(output_path)
    logging.info("–ö–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ %s", output_path)



if __name__ == "__main__":
    file_path = config.get("file_path", "restaurants.xlsx")
    df = read_excel_data(file_path)
    validate_columns(df)
    golden_audits, green_audits, red_audits, old_audits, goal_percentage, without_audits = calculate_statistics(df)
    map_ = create_map(df, golden_audits, green_audits, red_audits, goal_percentage, old_audits, without_audits)
    output_path = config.get("output_path", "index.html")
    save_map(map_, output_path)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DataFrame –≤ Excel
    excel_output_path = config.get("excel_output_path", "restaurants_output.xlsx")
    save_to_excel(df, excel_output_path)

from git import Repo
import os


def auto_push(file_path, message="update index.html"):
    try:
        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å git push...")

        if not os.path.exists(".git"):
            logging.error("[–û–®–ò–ë–ö–ê] –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è Git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º")
            return

        repo = Repo(".")

        # –î–æ–±–∞–≤–ª—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
        branch = repo.active_branch.name

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if not repo.index.diff(None) and not repo.untracked_files:
            logging.info("[–ò–ù–§–û] –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
            return

        repo.index.add([file_path])
        repo.index.commit(message)

        if not repo.remotes:
            logging.error("[–û–®–ò–ë–ö–ê] –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (origin)")
            return

        origin = repo.remote(name='origin')

        # –ò–∑–º–µ–Ω—è–µ–º push —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–µ—Ç–∫–∏
        push_info = origin.push(refspec=f'{branch}:{branch}')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç push
        if any(info.flags & info.ERROR for info in push_info):
            logging.warning("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            logging.info(f"[–£–°–ü–ï–•] index.html —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub (–≤–µ—Ç–∫–∞ {branch})")

    except Exception as e:
        logging.error(f"[–û–®–ò–ë–ö–ê] –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Git: {str(e)}", exc_info=True)

auto_push(output_path)